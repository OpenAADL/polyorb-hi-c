#ifndef GENERATED_ASN1SCC_SPACEWIRE_H
#define GENERATED_ASN1SCC_SPACEWIRE_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccSint __po_hi_c_Core_Frequence_T;

#define __po_hi_c_Core_Frequence_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define __po_hi_c_Core_Frequence_T_REQUIRED_BITS_FOR_ENCODING        32
#define __po_hi_c_Core_Frequence_T_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define __po_hi_c_Core_Frequence_T_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define __po_hi_c_Core_Frequence_T_REQUIRED_BYTES_FOR_XER_ENCODING   57

void __po_hi_c_Core_Frequence_T_Initialize(__po_hi_c_Core_Frequence_T* pVal);
flag __po_hi_c_Core_Frequence_T_IsConstraintValid(const __po_hi_c_Core_Frequence_T* val, int* pErrCode);
#ifndef ERR___po_hi_c_Core_Frequence_T 
#define ERR___po_hi_c_Core_Frequence_T		1001  /*(0 .. 4294967295)*/
#endif

typedef asn1SccSint __po_hi_c_Node_Addr_T;

#define __po_hi_c_Node_Addr_T_REQUIRED_BYTES_FOR_ENCODING       1 
#define __po_hi_c_Node_Addr_T_REQUIRED_BITS_FOR_ENCODING        8
#define __po_hi_c_Node_Addr_T_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define __po_hi_c_Node_Addr_T_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define __po_hi_c_Node_Addr_T_REQUIRED_BYTES_FOR_XER_ENCODING   47

void __po_hi_c_Node_Addr_T_Initialize(__po_hi_c_Node_Addr_T* pVal);
flag __po_hi_c_Node_Addr_T_IsConstraintValid(const __po_hi_c_Node_Addr_T* val, int* pErrCode);
#ifndef ERR___po_hi_c_Node_Addr_T 
#define ERR___po_hi_c_Node_Addr_T		1002  /*(0 .. 255)*/
#endif

typedef asn1SccSint __po_hi_c_Clock_Division_T;

#define __po_hi_c_Clock_Division_T_REQUIRED_BYTES_FOR_ENCODING       1 
#define __po_hi_c_Clock_Division_T_REQUIRED_BITS_FOR_ENCODING        8
#define __po_hi_c_Clock_Division_T_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define __po_hi_c_Clock_Division_T_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define __po_hi_c_Clock_Division_T_REQUIRED_BYTES_FOR_XER_ENCODING   57

void __po_hi_c_Clock_Division_T_Initialize(__po_hi_c_Clock_Division_T* pVal);
flag __po_hi_c_Clock_Division_T_IsConstraintValid(const __po_hi_c_Clock_Division_T* val, int* pErrCode);
#ifndef ERR___po_hi_c_Clock_Division_T 
#define ERR___po_hi_c_Clock_Division_T		1003  /*(0 .. 255)*/
#endif

typedef char __po_hi_c_spacewire_conf_t_devname[21];

#define __po_hi_c_spacewire_conf_t_devname_REQUIRED_BYTES_FOR_ENCODING       19 
#define __po_hi_c_spacewire_conf_t_devname_REQUIRED_BITS_FOR_ENCODING        145
#define __po_hi_c_spacewire_conf_t_devname_REQUIRED_BYTES_FOR_ACN_ENCODING   19 
#define __po_hi_c_spacewire_conf_t_devname_REQUIRED_BITS_FOR_ACN_ENCODING    145
#define __po_hi_c_spacewire_conf_t_devname_REQUIRED_BYTES_FOR_XER_ENCODING   73

void __po_hi_c_spacewire_conf_t_devname_Initialize(__po_hi_c_spacewire_conf_t_devname pVal);
flag __po_hi_c_spacewire_conf_t_devname_IsConstraintValid(const __po_hi_c_spacewire_conf_t_devname val, int* pErrCode);
#ifndef ERR___po_hi_c_spacewire_conf_t_devname 
#define ERR___po_hi_c_spacewire_conf_t_devname		1004  /*(SIZE(1 .. 20))*/
#endif

typedef struct {
    __po_hi_c_spacewire_conf_t_devname devname;
    __po_hi_c_Node_Addr_T nodeaddr;
    __po_hi_c_Core_Frequence_T corefreq;
    __po_hi_c_Clock_Division_T clockdiv;
    flag use_router;
    flag remove_prot_id;
    flag rxblock;
    flag txblock;
    struct {
        unsigned int corefreq:1;
        unsigned int clockdiv:1;
        unsigned int use_router:1;
        unsigned int remove_prot_id:1;
        unsigned int rxblock:1;
        unsigned int txblock:1;
    } exist;
} __po_hi_c_spacewire_conf_t;

#define __po_hi_c_spacewire_conf_t_REQUIRED_BYTES_FOR_ENCODING       26 
#define __po_hi_c_spacewire_conf_t_REQUIRED_BITS_FOR_ENCODING        203
#define __po_hi_c_spacewire_conf_t_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define __po_hi_c_spacewire_conf_t_REQUIRED_BITS_FOR_ACN_ENCODING    203
#define __po_hi_c_spacewire_conf_t_REQUIRED_BYTES_FOR_XER_ENCODING   347

void __po_hi_c_spacewire_conf_t_Initialize(__po_hi_c_spacewire_conf_t* pVal);
flag __po_hi_c_spacewire_conf_t_IsConstraintValid(const __po_hi_c_spacewire_conf_t* val, int* pErrCode);


extern const __po_hi_c_spacewire_conf_t leon_rasta_spw_sender;
extern const __po_hi_c_spacewire_conf_t leon_rasta_spw_receiver; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */





 


#ifdef  __cplusplus
}

#endif

#endif
