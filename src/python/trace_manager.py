# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_trace_manager', [dirname(__file__)])
        except ImportError:
            import _trace_manager
            return _trace_manager
        if fp is not None:
            try:
                _mod = imp.load_module('_trace_manager', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _trace_manager = swig_import_helper()
    del swig_import_helper
else:
    import _trace_manager
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


__po_hi_pinger_nb_ports = _trace_manager.__po_hi_pinger_nb_ports
__po_hi_ping_me_nb_ports = _trace_manager.__po_hi_ping_me_nb_ports
node_a_k = _trace_manager.node_a_k
invalid_protocol = _trace_manager.invalid_protocol
node_a_pinger_k_entity = _trace_manager.node_a_pinger_k_entity
node_a_ping_me_k_entity = _trace_manager.node_a_ping_me_k_entity
invalid_entity = _trace_manager.invalid_entity
node_a_pinger_k = _trace_manager.node_a_pinger_k
node_a_ping_me_k = _trace_manager.node_a_ping_me_k
invalid_task_id = _trace_manager.invalid_task_id
invalid_device_id = _trace_manager.invalid_device_id
invalid_bus_id = _trace_manager.invalid_bus_id
__PO_HI_NB_TASKS = _trace_manager.__PO_HI_NB_TASKS
__PO_HI_NB_PROTECTED = _trace_manager.__PO_HI_NB_PROTECTED
__PO_HI_NB_NODES = _trace_manager.__PO_HI_NB_NODES
__PO_HI_NB_ENTITIES = _trace_manager.__PO_HI_NB_ENTITIES
__PO_HI_NB_PORTS = _trace_manager.__PO_HI_NB_PORTS
pinger_global_data_source = _trace_manager.pinger_global_data_source
ping_me_global_data_sink = _trace_manager.ping_me_global_data_sink
invalid_port_t = _trace_manager.invalid_port_t
constant_out_identifier = _trace_manager.constant_out_identifier
pinger_local_data_source = _trace_manager.pinger_local_data_source
ping_me_local_data_sink = _trace_manager.ping_me_local_data_sink
invalid_local_port_t = _trace_manager.invalid_local_port_t
__PO_HI_NB_DEVICES = _trace_manager.__PO_HI_NB_DEVICES
__PO_HI_NB_BUSES = _trace_manager.__PO_HI_NB_BUSES
__PO_HI_NB_PROTOCOLS = _trace_manager.__PO_HI_NB_PROTOCOLS
__PO_HI_GQUEUE_FULL = _trace_manager.__PO_HI_GQUEUE_FULL
__PO_HI_GQUEUE_FIFO_INDATA = _trace_manager.__PO_HI_GQUEUE_FIFO_INDATA
__PO_HI_GQUEUE_FIFO_OUT = _trace_manager.__PO_HI_GQUEUE_FIFO_OUT

def __po_hi_gqueue_init(*args):
  return _trace_manager.__po_hi_gqueue_init(*args)
__po_hi_gqueue_init = _trace_manager.__po_hi_gqueue_init

def __po_hi_gqueue_store_out(*args):
  return _trace_manager.__po_hi_gqueue_store_out(*args)
__po_hi_gqueue_store_out = _trace_manager.__po_hi_gqueue_store_out

def __po_hi_gqueue_get_value(*args):
  return _trace_manager.__po_hi_gqueue_get_value(*args)
__po_hi_gqueue_get_value = _trace_manager.__po_hi_gqueue_get_value

def __po_hi_gqueue_next_value(*args):
  return _trace_manager.__po_hi_gqueue_next_value(*args)
__po_hi_gqueue_next_value = _trace_manager.__po_hi_gqueue_next_value

def __po_hi_gqueue_get_count(*args):
  return _trace_manager.__po_hi_gqueue_get_count(*args)
__po_hi_gqueue_get_count = _trace_manager.__po_hi_gqueue_get_count

def __po_hi_gqueue_wait_for_incoming_event(*args):
  return _trace_manager.__po_hi_gqueue_wait_for_incoming_event(*args)
__po_hi_gqueue_wait_for_incoming_event = _trace_manager.__po_hi_gqueue_wait_for_incoming_event

def __po_hi_gqueue_store_in(*args):
  return _trace_manager.__po_hi_gqueue_store_in(*args)
__po_hi_gqueue_store_in = _trace_manager.__po_hi_gqueue_store_in

def __po_hi_gqueue_get_most_recent_value(*args):
  return _trace_manager.__po_hi_gqueue_get_most_recent_value(*args)
__po_hi_gqueue_get_most_recent_value = _trace_manager.__po_hi_gqueue_get_most_recent_value

def __po_hi_gqueue_get_destination(*args):
  return _trace_manager.__po_hi_gqueue_get_destination(*args)
__po_hi_gqueue_get_destination = _trace_manager.__po_hi_gqueue_get_destination

def __po_hi_gqueue_get_destinations_number(*args):
  return _trace_manager.__po_hi_gqueue_get_destinations_number(*args)
__po_hi_gqueue_get_destinations_number = _trace_manager.__po_hi_gqueue_get_destinations_number

def __po_hi_gqueue_get_port_size(*args):
  return _trace_manager.__po_hi_gqueue_get_port_size(*args)
__po_hi_gqueue_get_port_size = _trace_manager.__po_hi_gqueue_get_port_size

def __po_hi_gqueue_used_size(*args):
  return _trace_manager.__po_hi_gqueue_used_size(*args)
__po_hi_gqueue_used_size = _trace_manager.__po_hi_gqueue_used_size

def po_hi_gqueues_queue_is_empty(*args):
  return _trace_manager.po_hi_gqueues_queue_is_empty(*args)
po_hi_gqueues_queue_is_empty = _trace_manager.po_hi_gqueues_queue_is_empty

def __po_hi_gqueues_get_request(*args):
  return _trace_manager.__po_hi_gqueues_get_request(*args)
__po_hi_gqueues_get_request = _trace_manager.__po_hi_gqueues_get_request
class _po_hi_request_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _po_hi_request_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _po_hi_request_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port"] = _trace_manager._po_hi_request_t_port_set
    __swig_getmethods__["port"] = _trace_manager._po_hi_request_t_port_get
    if _newclass:port = _swig_property(_trace_manager._po_hi_request_t_port_get, _trace_manager._po_hi_request_t_port_set)
    __swig_getmethods__["vars"] = _trace_manager._po_hi_request_t_vars_get
    if _newclass:vars = _swig_property(_trace_manager._po_hi_request_t_vars_get)
    def __init__(self): 
        this = _trace_manager.new__po_hi_request_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trace_manager.delete__po_hi_request_t
    __del__ = lambda self : None;
_po_hi_request_t_swigregister = _trace_manager._po_hi_request_t_swigregister
_po_hi_request_t_swigregister(_po_hi_request_t)

class _po_hi_request_t_vars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _po_hi_request_t_vars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _po_hi_request_t_vars, name)
    __repr__ = _swig_repr
    __swig_getmethods__["ping_me_global_data_sink"] = _trace_manager._po_hi_request_t_vars_ping_me_global_data_sink_get
    if _newclass:ping_me_global_data_sink = _swig_property(_trace_manager._po_hi_request_t_vars_ping_me_global_data_sink_get)
    __swig_getmethods__["pinger_global_data_source"] = _trace_manager._po_hi_request_t_vars_pinger_global_data_source_get
    if _newclass:pinger_global_data_source = _swig_property(_trace_manager._po_hi_request_t_vars_pinger_global_data_source_get)
    def __init__(self): 
        this = _trace_manager.new__po_hi_request_t_vars()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trace_manager.delete__po_hi_request_t_vars
    __del__ = lambda self : None;
_po_hi_request_t_vars_swigregister = _trace_manager._po_hi_request_t_vars_swigregister
_po_hi_request_t_vars_swigregister(_po_hi_request_t_vars)

class _po_hi_request_t_vars_ping_me_global_data_sink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _po_hi_request_t_vars_ping_me_global_data_sink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _po_hi_request_t_vars_ping_me_global_data_sink, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ping_me_global_data_sink"] = _trace_manager._po_hi_request_t_vars_ping_me_global_data_sink_ping_me_global_data_sink_set
    __swig_getmethods__["ping_me_global_data_sink"] = _trace_manager._po_hi_request_t_vars_ping_me_global_data_sink_ping_me_global_data_sink_get
    if _newclass:ping_me_global_data_sink = _swig_property(_trace_manager._po_hi_request_t_vars_ping_me_global_data_sink_ping_me_global_data_sink_get, _trace_manager._po_hi_request_t_vars_ping_me_global_data_sink_ping_me_global_data_sink_set)
    def __init__(self): 
        this = _trace_manager.new__po_hi_request_t_vars_ping_me_global_data_sink()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trace_manager.delete__po_hi_request_t_vars_ping_me_global_data_sink
    __del__ = lambda self : None;
_po_hi_request_t_vars_ping_me_global_data_sink_swigregister = _trace_manager._po_hi_request_t_vars_ping_me_global_data_sink_swigregister
_po_hi_request_t_vars_ping_me_global_data_sink_swigregister(_po_hi_request_t_vars_ping_me_global_data_sink)

class _po_hi_request_t_vars_pinger_global_data_source(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _po_hi_request_t_vars_pinger_global_data_source, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _po_hi_request_t_vars_pinger_global_data_source, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pinger_global_data_source"] = _trace_manager._po_hi_request_t_vars_pinger_global_data_source_pinger_global_data_source_set
    __swig_getmethods__["pinger_global_data_source"] = _trace_manager._po_hi_request_t_vars_pinger_global_data_source_pinger_global_data_source_get
    if _newclass:pinger_global_data_source = _swig_property(_trace_manager._po_hi_request_t_vars_pinger_global_data_source_pinger_global_data_source_get, _trace_manager._po_hi_request_t_vars_pinger_global_data_source_pinger_global_data_source_set)
    def __init__(self): 
        this = _trace_manager.new__po_hi_request_t_vars_pinger_global_data_source()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trace_manager.delete__po_hi_request_t_vars_pinger_global_data_source
    __del__ = lambda self : None;
_po_hi_request_t_vars_pinger_global_data_source_swigregister = _trace_manager._po_hi_request_t_vars_pinger_global_data_source_swigregister
_po_hi_request_t_vars_pinger_global_data_source_swigregister(_po_hi_request_t_vars_pinger_global_data_source)

__PO_HI_NB_OPERATIONS = _trace_manager.__PO_HI_NB_OPERATIONS
__TRACE_GENERIC_TASK_MONITORED = _trace_manager.__TRACE_GENERIC_TASK_MONITORED
__TRACE_PERIODIC_TASK_MONITORED = _trace_manager.__TRACE_PERIODIC_TASK_MONITORED
__TRACE_SPORADIC_TASK_MONITORED = _trace_manager.__TRACE_SPORADIC_TASK_MONITORED

def update_periodic_dispatch(*args):
  return _trace_manager.update_periodic_dispatch(*args)
update_periodic_dispatch = _trace_manager.update_periodic_dispatch

def generic_task_creation(*args):
  return _trace_manager.generic_task_creation(*args)
generic_task_creation = _trace_manager.generic_task_creation

def periodic_task_creation(*args):
  return _trace_manager.periodic_task_creation(*args)
periodic_task_creation = _trace_manager.periodic_task_creation

def sporadic_task_creation(*args):
  return _trace_manager.sporadic_task_creation(*args)
sporadic_task_creation = _trace_manager.sporadic_task_creation

def entry_ports_monitoring_at_periodic_dispatch(*args):
  return _trace_manager.entry_ports_monitoring_at_periodic_dispatch(*args)
entry_ports_monitoring_at_periodic_dispatch = _trace_manager.entry_ports_monitoring_at_periodic_dispatch

def update_sporadic_dispatch(*args):
  return _trace_manager.update_sporadic_dispatch(*args)
update_sporadic_dispatch = _trace_manager.update_sporadic_dispatch

def trace_initialize():
  return _trace_manager.trace_initialize()
trace_initialize = _trace_manager.trace_initialize

def init_monitored_ports_for_thread(*args):
  return _trace_manager.init_monitored_ports_for_thread(*args)
init_monitored_ports_for_thread = _trace_manager.init_monitored_ports_for_thread


