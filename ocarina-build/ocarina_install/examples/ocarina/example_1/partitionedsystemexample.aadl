-- This example is adapted from the ARINC653 annex document for the AADLv2

-------------------------------------------------------------------------------
-- The following example shows a system with two partitions. It shows
-- the components involved in the modeling of ARINC653 system and
-- illustrates the mapping of ARINC653 concepts to the AADL.
--
-- a. The first ARINC653 partition is modeled with the AADL process
-- partition1_process (which models the space isolation) bound to the
-- AADL virtual processor part1 (which models intra-partition
-- runtime).
--
-- b. In the same way, the second partition is modeled with the
-- process partition2_process and the virtual processor part2.
--
-- c. The scheduling algorithm used in each partition is specified in
-- the virtual processor component that models the runtime within each
-- partition.
--
-- d. The main memory (mem) is divided into two memory components
-- (part1em and part2em). Each partition process (partition1_process
-- and partition2_process) is bound to a memory component.
--
-- e. The ARINC653 module (kernel) schedules the partitions on the
-- processor and therefore provides the runtime at the processor
-- level. In AADL, the processor concept includes the runtime
-- environment. Therefore, the ARINC653 kernel and the physical
-- processor itself are specified with the AADL processor
-- component. It contains properties (ARINC653::Partition_Slots,
-- ARINC653::Slots_Allocation, ARINC653::Module_Major_Frame) that
-- describe scheduling requirements (major time frame, window slots
-- and their allocation).
--
-- f. In the first partition (partition1_process), an intra-partition
-- communication that uses ARINC653 buffers is specified (AADL event
-- data ports). This communication is made between AADL thread
-- components representing ARINC653 processes (order and temperature).
--
-- g. In the second partition (partition2_process), an intra-partition
-- communication that corresponds to blackboards is added (AADL shared
-- data component). This communication is made between the two threads
-- of the partition (printer and receiver).
--
-- h. In the second partition (partition2_process), a communication
-- using AADL event ports between two AADL thread components (ARINC653
-- processes) is added.
--
-- i. A shared data component between the two threads (printer and
-- receiver) of the second partition is added. The shared data is
-- protected from concurrent accesses using ARINC653 semaphores.

package PartitionedSystemExample
public
  with ARINC653;
  with Processors::PPC;
  with memories;

  data integer end integer;
  data ordercmd end ordercmd;

  data protected_data
  properties
    Concurrency_Control_Protocol => Protected_Access;
    --  Queue_Processing_Protocol => FIFO; XXX
  end protected_data;

  -- Now, declare the virtual processors that model partition
  -- runtime.

  virtual processor partition1_rt
  properties
    Scheduling_Protocol => (ROUND_ROBIN_PROTOCOL);
  end partition1_rt;

  virtual processor implementation partition1_rt.impl
  end partition1_rt.impl;

  virtual processor partition2_rt
  properties
    Scheduling_Protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL);
  end partition2_rt;

  virtual processor implementation partition2_rt.impl
  end partition2_rt.impl;

  subprogram sensor_temperature_spg
  end sensor_temperature_spg;

  subprogram sensor_receiveinput_spg
  end sensor_receiveinput_spg;

  subprogram commandboard_receiveinput_spg
  end commandboard_receiveinput_spg;

  subprogram commandboard_printinfos_spg
  end commandboard_printinfos_spg;

  -- Threads for the first partition
  thread sensor_temperature_thread
  features
    tempout: out data port integer;
    order: in event data port ordercmd;
  properties
    Initialize_Entrypoint
       => classifier (PartitionedSystemExample::sensor_temperature_spg);
    Priority => 42;
    Source_Stack_Size => 100 Kbyte;
    Period => 20 ms;
    Compute_Execution_Time => 10 ms .. 12 ms;
    Deadline => 40 ms;
    ARINC653::HM_Errors =>
    (Deadline_Miss, Application_Error, Numeric_Error, Illegal_Request);
    ARINC653::HM_Process_Recovery_actions =>
    (Process_Restart, Process_Restart, Ignore, Ignore);
  end sensor_temperature_thread;

  thread implementation	sensor_temperature_thread.impl
  end sensor_temperature_thread.impl;

  thread sensor_receiveinput_thread
  features
    commandin: in event data port integer;
    order: out event data port ordercmd;
  properties
    Initialize_Entrypoint
       => classifier (PartitionedSystemExample::sensor_receiveinput_spg);
    Priority => 10;
    Dispatch_Protocol => periodic;
    Source_Stack_Size => 100 Kbyte;
    Period => 20 ms;
    Compute_Execution_Time => 8 ms .. 10 ms;
    Deadline => 40 ms;
    ARINC653::HM_Errors => (Deadline_Miss, Application_Error, Numeric_Error, Illegal_Request);
    ARINC653::HM_Process_Recovery_Actions => (Process_Restart, Process_Restart, Process_Restart, Process_Restart);

  end sensor_receiveinput_thread;

  --thread implementation	sensor_receiveinput_thread.impl
  --end	sensor_receiveinput_thread.impl;

  -- Threads for the second partition
  thread commandboard_receiveinput_thread
  features
    temp: in data port integer;
    tempavg : requires data access integer;
    newavg: out event port;
    need_semaphore : requires data access protected_data;

  properties
    Initialize_Entrypoint => classifier (PartitionedSystemExample::commandboard_receiveinput_spg);
    Priority => 42;
    Source_Stack_Size => 100 Kbyte;
    Period => 20 ms;
    Compute_Execution_Time => 5 ms .. 7 ms;
    Deadline => 40 ms;
    ARINC653::HM_Errors => (Deadline_Miss, Application_Error, Numeric_Error, Illegal_Request);
    ARINC653::HM_Process_Recovery_Actions => (Process_Restart, Process_Stop, Process_Stop, Process_Stop);
  end commandboard_receiveinput_thread;

  thread commandboard_printinfos_thread
  features
    ordersensor: out event data port integer;
    tempavg : requires data access integer;
    newavg: in event port;
    need_semaphore : requires data access protected_data;

  properties
    Initialize_Entrypoint => classifier (PartitionedSystemExample::commandboard_printinfos_spg);
    Priority => 43;
    Source_Stack_Size => 100 Kbyte;
    Period => 20 ms;
    Compute_Execution_Time => 2 ms .. 6 ms;
    Deadline => 40 ms;
    ARINC653::HM_Errors => (Deadline_Miss, Application_Error, Numeric_Error, Illegal_Request);
    ARINC653::HM_Process_Recovery_Actions => (Process_Restart, Process_Restart, Process_Restart, Process_Restart);
  end commandboard_printinfos_thread;

  -- Now, declare process that model partition address space
  process partition1_process
  features
    queueingin: in event data port integer
    {Queue_Size => 4;
    ARINC653::Timeout => 5ms;
    -- In the context of a event data port, the ARINC653::Timeout
    -- property is the timeout we used in the APEX functions.  More, the
    -- Queue_Size property is used to compute the size of the queue of
    -- the port.  Finally, the Queue_Processing_Protocol indicates how
    -- you handle queuing data and how data are classified in the queue.

    Queue_Processing_Protocol => FIFO;
    };

    samplingout: out data port integer;

  end partition1_process;

  process implementation partition1_process.impl
  subcomponents
    temperature : thread sensor_temperature_thread.impl;
    order	: thread sensor_receiveinput_thread;

  connections
    bufferconnectionexample: port order.order -> temperature.order;
    Po1:port queueingin -> order.commandin;
    Po2:port temperature.tempout -> samplingout;

  end partition1_process.impl;

  process partition2_process
  features
    queueingout: out event data port integer {ARINC653::Timeout => 10ms;};
    -- In the context of a event data port, the ARINC653::Timeout
    -- property is the timeout we used in the APEX functions.

    samplingin: in data port integer
    {ARINC653::Sampling_Refresh_Period => 10ms;};
    -- The ARINC653::Timeout apply only to in data port. It is the
    -- refresh period for sampling ports.
  end partition2_process;

  process implementation partition2_process.impl
  subcomponents
    receiver: thread commandboard_receiveinput_thread;
    printer  : thread commandboard_printinfos_thread;
    sem  : data protected_data;
    blackboard  : data integer;

  connections
    -- example of intra-partition communication with data ports (blackboards)

    blackboardconnection1: data access blackboard -> printer.tempavg;
    blackboardconnection2: data access blackboard -> receiver.tempavg;

    -- example of intra-partition communication with event port (events)

    eventconnectionexample: port receiver.newavg -> printer.newavg;
    Po3:port printer.ordersensor -> queueingout;
    Po4:port samplingin -> receiver.temp;
    Po5:data access sem -> receiver.need_semaphore; --{ARINC653::Timeout => 20 ms;};
    Po6:data access sem -> printer.need_semaphore;  --{ARINC653::Timeout => 10 ms;};
  end partition2_process.impl;

  -- Main runtime
  processor powerpc extends Processors::PPC::PPC750
   end powerpc;

  processor implementation powerpc.impl extends Processors::PPC::PPC750.impl
  subcomponents
    part1:	virtual processor partition1_rt.impl;
    part2:	virtual processor partition2_rt.impl;

  properties
    ARINC653::Module_Major_Frame => 50ms;
    ARINC653::Partition_Slots => (10ms, 10ms, 30ms);
    ARINC653::Slots_Allocation => (reference (part1), reference (part2), reference (part1));
    ARINC653::HM_Errors => (Power_Fail);
    ARINC653::HM_Module_Recovery_Actions => (Reset);
  end powerpc.impl;

  -- Memory
  memory partition1_memory extends memories::RAM
  properties
    Base_Address => 0;
    ARINC653::Memory_Type => (Code_Memory);
  end partition1_memory;

  memory partition2_memory extends memories::RAM
  properties
    Base_Address => 100;
    ARINC653::Memory_Type => (Code_Memory);
  end partition2_memory;

  memory main_memory
  end main_memory;

  memory implementation main_memory.impl
  subcomponents
    part1mem: memory partition1_memory;
    part2mem: memory partition2_memory;
  end main_memory.impl;

  system arincsystem
  end arincsystem;

  system implementation arincsystem.impl
  subcomponents
    mem	: memory main_memory.impl;
    cpu	: processor powerpc.impl;
    partition1_pr : process partition1_process.impl;
    partition2_pr : process partition2_process.impl;

  connections
    samplingconnection: port partition1_pr.samplingout -> partition2_pr.samplingin;
    queueingconnection: port partition2_pr.queueingout -> partition1_pr.queueingin;

  properties
    -- bind partition process to their associated runtime (virtual
    -- processor)

    Actual_Processor_Binding => (reference (cpu.part1)) applies to partition1_pr;
    Actual_Processor_Binding => (reference (cpu.part2)) applies to partition2_pr;

    -- bind partition process to their address spaces (memory
    -- components)

    Actual_Memory_Binding => (reference (mem.part1mem)) applies to partition1_pr;
    Actual_Memory_Binding => (reference (mem.part2mem)) applies to partition2_pr;

  end arincsystem.impl;

end PartitionedSystemExample;
