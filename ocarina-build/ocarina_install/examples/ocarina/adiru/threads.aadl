--  This package models ADIRU threads

package threads
public

  with ARINC653;
  with SHM_DataType;
  with subprograms;

  --  For each thread, we model
  --  * its interface (features) as in/out (event) data port
  --  * its scheduling parameters and memory requirements used by the
  --    RTOS at configuration time

  thread acc1_dataOutput
  features
    acc1out: out data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 50 ms;};
    acc1_command_in: in event data port SHM_DataType::actionData;
  properties
    Dispatch_Protocol => Periodic;
    Priority => 2;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Period => 4000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end acc1_dataOutput;

  thread implementation acc1_dataOutput.impl
  calls
    sub1: { spg: subprogram subprograms::acc1_dataOutput_spg;};
  connections
    C1: parameter spg.acc1DataOut->acc1out;
    C2: parameter acc1_command_in->spg.event_in;
  end  acc1_dataOutput.impl;

  thread acc1_dataOutput_emv2 extends acc1_dataOutput
  features
    acc1_input: in data port SHM_DataType::accData;
  end acc1_dataOutput_emv2;

  thread implementation acc1_dataOutput_emv2.impl extends acc1_dataOutput.impl
  end acc1_dataOutput_emv2.impl;

  -----------------------------------------------------------------------------------------------
  thread  acc2_dataOutput
  features
    acc2out: out data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 50 ms;};
    acc2_command_in: in event data port SHM_DataType::actionData;
  properties
    --Reference_Processor=>classifier(ACC_Module::powerpc_acc);
    --Initialize_Entrypoint => classifier (ACC_Module::acc_dataOutput_spg);
    Dispatch_Protocol => Periodic;
    Priority => 1;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Period => 4000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end acc2_dataOutput;

  thread implementation  acc2_dataOutput.impl
  calls
    sub1: { spg: subprogram subprograms::acc2_dataOutput_spg;};

  connections
    C1: parameter spg.acc2DataOut->acc2out;
    C2: parameter acc2_command_in->spg.event_in;
  end  acc2_dataOutput.impl;

  thread acc2_dataOutput_emv2 extends acc2_dataOutput
  features
    acc2_input: in data port SHM_DataType::accData;
  end acc2_dataOutput_emv2;

  thread implementation acc2_dataOutput_emv2.impl extends acc2_dataOutput.impl
  end acc2_dataOutput_emv2.impl;

  -----------------------------------------------------------------------------------------------
  thread acc3_dataOutput
  features
    accout: out data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 50 ms;};
    acc_command_in: in event data port SHM_DataType::actionData;
  properties
    --Reference_Processor=>classifier(ACC_Module::powerpc_acc);
    --Initialize_Entrypoint => classifier (ACC_Module::acc_dataOutput_spg);
    Dispatch_Protocol => Periodic;
    Priority => 1;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Period => 4000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end acc3_dataOutput;

  thread implementation acc3_dataOutput.impl
  calls
    sub1: { spg: subprogram subprograms::acc3_dataOutput_spg;};

  connections
    C1: parameter spg.accDataOut->accout;
    C2: parameter acc_command_in->spg.event_in;
  end  acc3_dataOutput.impl;

  thread acc3_dataOutput_emv2 extends acc3_dataOutput
  features
    acc3_input: in data port SHM_DataType::accData;
  end acc3_dataOutput_emv2;

  thread implementation acc3_dataOutput_emv2.impl extends acc3_dataOutput.impl
  end acc3_dataOutput_emv2.impl;

  -----------------------------------------------------------------------------------------------
  thread acc4_dataOutput
  features
    accout: out data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 50 ms;};
    acc_command_in: in event data port SHM_DataType::actionData;
  properties
    --Reference_Processor=>classifier(ACC_Module::powerpc_acc);
    --Initialize_Entrypoint => classifier (ACC_Module::acc_dataOutput_spg);
    Dispatch_Protocol => Periodic;
    Priority => 1;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Period => 4000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end acc4_dataOutput;

  thread implementation acc4_dataOutput.impl
  calls
    sub1: { spg: subprogram subprograms::acc4_dataOutput_spg;};

  connections
    C1: parameter spg.accDataOut->accout;
    C2: parameter acc_command_in->spg.event_in;
  end  acc4_dataOutput.impl;

  thread acc4_dataOutput_emv2 extends acc4_dataOutput
  features
    acc4_input: in data port SHM_DataType::accData;
  end acc4_dataOutput_emv2;

  thread implementation acc4_dataOutput_emv2.impl extends acc4_dataOutput.impl
  end acc4_dataOutput_emv2.impl;

  -----------------------------------------------------------------------------------------------
  thread acc5_dataOutput
  features
    accout: out data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 50 ms;};
    acc_command_in: in event data port SHM_DataType::actionData;
  properties
   Dispatch_Protocol => Periodic;
   Priority => 1;
   Stack_Size => 20 KByte;
   Code_Size => 100 KByte;
   Data_Size => 1 KByte;
   Period => 4000 ms;
   Compute_Execution_Time => 400 ms .. 500 ms;
   Deadline => 500 ms;
  end acc5_dataOutput;

  thread implementation acc5_dataOutput.impl
  calls
    sub1: { spg: subprogram subprograms::acc5_dataOutput_spg;};

  connections
    C1: parameter spg.accDataOut->accout;
    C2: parameter acc_command_in->spg.event_in;
  end acc5_dataOutput.impl;

  thread acc5_dataOutput_emv2 extends acc5_dataOutput
  features
    acc5_input: in data port SHM_DataType::accData;
  end acc5_dataOutput_emv2;

  thread implementation acc5_dataOutput_emv2.impl extends acc5_dataOutput.impl
  end acc5_dataOutput_emv2.impl;

  -----------------------------------------------------------------------------------------------
  thread acc6_dataOutput
  features
    accout: out data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 50 ms;};
    acc_command_in: in event data port SHM_DataType::actionData;
  properties
    Dispatch_Protocol => Periodic;
    Priority => 1;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Period => 4000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end acc6_dataOutput;

  thread implementation acc6_dataOutput.impl
  calls
    sub1: { spg: subprogram subprograms::acc6_dataOutput_spg;};

  connections
    C1: parameter spg.accDataOut->accout;
    C2: parameter acc_command_in->spg.event_in;
  end acc6_dataOutput.impl;

  thread acc6_dataOutput_emv2 extends acc6_dataOutput
  features
    acc6_input: in data port SHM_DataType::accData;
  end acc6_dataOutput_emv2;

  thread implementation acc6_dataOutput_emv2.impl extends acc6_dataOutput.impl
  end acc6_dataOutput_emv2.impl;

  -----------------------------------------------------------------------------------------------
  thread acc_HM
  features
    acc1_data_monitor: in data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 20 ms;};
    acc2_data_monitor: in data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 20 ms;};
    acc3_data_monitor: in data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 20 ms;};
    acc4_data_monitor: in data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 20 ms;};
    acc5_data_monitor: in data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 20 ms;};
    acc6_data_monitor: in data port SHM_DataType::accData {ARINC653::Sampling_Refresh_Period => 20 ms;};

    acc1_validated_dataout:out data port SHM_DataType::accData;
    acc2_validated_dataout:out data port SHM_DataType::accData;
    acc3_validated_dataout:out data port SHM_DataType::accData;
    acc4_validated_dataout:out data port SHM_DataType::accData;
    acc5_validated_dataout:out data port SHM_DataType::accData;
    acc6_validated_dataout:out data port SHM_DataType::accData;

    acc_error_action: in event data port SHM_DataType::actionData;
    acc_error_out: out event data port SHM_DataType::errorData;

    event_to_acc1: out event data port SHM_DataType::actionData;
    event_to_acc2: out event data port SHM_DataType::actionData;
    event_to_acc3: out event data port SHM_DataType::actionData;
    event_to_acc4: out event data port SHM_DataType::actionData;
    event_to_acc5: out event data port SHM_DataType::actionData;
    event_to_acc6: out event data port SHM_DataType::actionData;
  properties
    Dispatch_Protocol => Periodic;
    Priority => 3;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Period => 4000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end acc_HM;

  thread implementation acc_HM.impl
  calls
    sub1: { spg: subprogram subprograms::acc_HM_spg;};

  connections
    C1: parameter acc1_data_monitor->spg.in_para1;
    C2: parameter acc2_data_monitor->spg.in_para2;
    C3: parameter acc3_data_monitor->spg.in_para3;
    C4: parameter acc4_data_monitor->spg.in_para4;
    C5: parameter acc5_data_monitor->spg.in_para5;
    C6: parameter acc6_data_monitor->spg.in_para6;

    C7: parameter spg.out_para1->acc1_validated_dataout;
    C8: parameter spg.out_para2->acc2_validated_dataout;
    C9: parameter spg.out_para3->acc3_validated_dataout;
    C10: parameter spg.out_para4->acc4_validated_dataout;
    C11: parameter spg.out_para5->acc5_validated_dataout;
    C12: parameter spg.out_para6->acc6_validated_dataout;

    C13: parameter spg.event_to_acc1->event_to_acc1;
    C14: parameter spg.event_to_acc2->event_to_acc2;
    C15: parameter spg.event_to_acc3->event_to_acc3;
    C16: parameter spg.event_to_acc4->event_to_acc4;
    C17: parameter spg.event_to_acc5->event_to_acc5;
    C18: parameter spg.event_to_acc6->event_to_acc6;

    C19: parameter acc_error_action->spg.in_action_command;
    C20: parameter spg.out_error_data->acc_error_out;
  end acc_HM.impl;

  -----------------------------------------------------------------------------------------------
  thread ADIRUp_solve
  features
    solver_in1:  in data port SHM_DataType::accData;
    solver_in2:  in data port SHM_DataType::accData;
    solver_in3:  in data port SHM_DataType::accData;
    solver_in4:  in data port SHM_DataType::accData;
    solver_in5:  in data port SHM_DataType::accData;
    solver_in6:  in data port SHM_DataType::accData;
    --ADIRUpout: out data port SHM_DataType::accData;
  properties
    Priority => 4;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Dispatch_Protocol => Periodic;
    Period => 4000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end ADIRUp_solve;

  thread implementation ADIRUp_solve.impl
  calls
    sub1: { ADIRUp_solve: subprogram subprograms::ADIRUp_solve_spg; };
  connections
    C1: parameter solver_in1->ADIRUp_solve.inData_para1;
    C2: parameter solver_in2->ADIRUp_solve.inData_para2;
    C3: parameter solver_in3->ADIRUp_solve.inData_para3;
    C4: parameter solver_in4->ADIRUp_solve.inData_para4;
    C5: parameter solver_in5->ADIRUp_solve.inData_para5;
    C6: parameter solver_in6->ADIRUp_solve.inData_para6;

    --parameter ADIRUp_solve.outdata_para-> ADIRUpout;
  end ADIRUp_solve.impl;

  -----------------------------------------------------------------------------------------------
  thread  ADIRUp_HM
  features
    accData_in1:  in data port SHM_DataType::accData;
    accData_in2:  in data port SHM_DataType::accData;
    accData_in3:  in data port SHM_DataType::accData;
    accData_in4:  in data port SHM_DataType::accData;
    accData_in5:  in data port SHM_DataType::accData;
    accData_in6:  in data port SHM_DataType::accData;
    accData_out1:  out data port SHM_DataType::accData;
    accData_out2:  out data port SHM_DataType::accData;
    accData_out3:  out data port SHM_DataType::accData;
    accData_out4:  out data port SHM_DataType::accData;
    accData_out5:  out data port SHM_DataType::accData;
    accData_out6:  out data port SHM_DataType::accData;
    adirup_error_action: in event data port SHM_DataType::actionData;
    adirup_error_out: out event data port SHM_DataType::errorData;
  properties
    Priority => 5;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Dispatch_Protocol => Periodic;
    Period => 4000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end ADIRUp_HM;

  thread implementation ADIRUp_HM.impl
  calls
    sub1: { ADIRUp_HM: subprogram subprograms::ADIRUp_HM_spg; };

  connections
    C1: parameter accData_in1->ADIRUp_HM.inData_para1;
    C2: parameter accData_in2->ADIRUp_HM.inData_para2;
    C3: parameter accData_in3->ADIRUp_HM.inData_para3;
    C4: parameter accData_in4->ADIRUp_HM.inData_para4;
    C5: parameter accData_in5->ADIRUp_HM.inData_para5;
    C6: parameter accData_in6->ADIRUp_HM.inData_para6;

    C7: parameter ADIRUp_HM.outdata_para1->accData_out1;
    C8: parameter ADIRUp_HM.outdata_para2->accData_out2;
    C9: parameter ADIRUp_HM.outdata_para3->accData_out3;
    C10: parameter ADIRUp_HM.outdata_para4->accData_out4;
    C11: parameter ADIRUp_HM.outdata_para5->accData_out5;
    C12: parameter ADIRUp_HM.outdata_para6->accData_out6;

    C13: parameter adirup_error_action->ADIRUp_HM.error_action_in;
    C14:parameter  ADIRUp_HM.error_data_out->adirup_error_out;
  end ADIRUp_HM.impl;

  -----------------------------------------------------------------------------------------------
  thread alarmAggregator
  features
    arlarm_acc_in: in event data  port SHM_DataType::errorData;
    arlarm_adirup_in: in event data  port SHM_DataType::errorData;
    -- acc1_error: in event data  port SHM_DataType::errorData;
    -- acc2_error: in event data  port SHM_DataType::errorData;
    -- acc3_error: in event data  port SHM_DataType::errorData;
    -- acc4_error: in event data  port SHM_DataType::errorData;
    -- acc5_error: in event data  port SHM_DataType::errorData;
    -- acc6_error: in event data  port SHM_DataType::errorData;
    --
    -- ADIRUp1_error: in event data  port SHM_DataType::errorData;
    -- ADIRUp2_error: in event data  port SHM_DataType::errorData;
    -- ADIRUp3_error: in event data  port SHM_DataType::errorData;
    -- ADIRUp4_error: in event data  port SHM_DataType::errorData;
    --
    -- VDl_error: in event data  port SHM_DataType::errorData;
    -- VDc_error: in event data  port SHM_DataType::errorData;
    -- VDr_error: in event data  port SHM_DataType::errorData;

    alarmAggregator_out: out event data port SHM_DataType::errorData;
  properties
    Priority => 6;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Dispatch_Protocol => Periodic;
    Period => 3000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end alarmAggregator;

  thread implementation alarmAggregator.impl
  calls
    sub1: { alarmAggregator: subprogram subprograms::alarmAggregator_spg; };

  connections
    C1: parameter  arlarm_acc_in->alarmAggregator.inData_para1;
    C2: parameter  arlarm_adirup_in->alarmAggregator.inData_para2;
    C3: parameter  alarmAggregator.outData_para->alarmAggregator_out;
  end alarmAggregator.impl;

  -----------------------------------------------------------------------------------------------
  thread diagnosisEngine
  features
    diagnosis_in: in event data port SHM_DataType::errorData;
    diagnosis_out: out event data port SHM_DataType::errorData;
  properties
    Priority => 7;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Dispatch_Protocol => Periodic;
    Period => 3000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end diagnosisEngine;

  thread implementation diagnosisEngine.impl
  calls
    sub1: { diagnosisEngine: subprogram subprograms::diagnosisEngine_spg; };

  connections
    C1: parameter  diagnosis_in->diagnosisEngine.inData_para;
    C2: parameter  diagnosisEngine.outData_para->diagnosis_out;
  end diagnosisEngine.impl;

  -----------------------------------------------------------------------------------------------
  thread mitigationActor_th
  features
    mitigation_in: in event data port SHM_DataType::errorData;

    mitigation_command: out event data  port SHM_DataType::actionData;
    -- acc2_action: out event data  port SHM_DataType::actionData;
    -- acc3_action: out event data  port SHM_DataType::actionData;
    -- acc4_action: out event data  port SHM_DataType::actionData;
    -- acc5_action: out event data  port SHM_DataType::actionData;
    -- acc6_action: out event data  port SHM_DataType::actionData;
    --
    -- ADIRUp1_action: out event data  port SHM_DataType::actionData;
    -- ADIRUp2_action: out event data  port SHM_DataType::actionData;
    -- ADIRUp3_action: out event data  port SHM_DataType::actionData;
    -- ADIRUp4_action: out event data  port SHM_DataType::actionData;
    --
    -- VDl_action: out event data  port SHM_DataType::actionData;
    -- VDc_action: out event data  port SHM_DataType::actionData;
    -- VDr_action: out event data  port SHM_DataType::actionData;
  properties
    Priority => 8;
    Stack_Size => 20 KByte;
    Code_Size => 100 KByte;
    Data_Size => 1 KByte;
    Dispatch_Protocol => Periodic;
    Period => 3000 ms;
    Compute_Execution_Time => 400 ms .. 500 ms;
    Deadline => 500 ms;
  end mitigationActor_th;

  thread implementation mitigationActor_th.impl
  calls
    sub1: { mitigationActor: subprogram subprograms::mitigationActor_spg; };

  connections
    C1: parameter mitigation_in->mitigationActor.inData_para;
    C2: parameter mitigationActor.outData_para->mitigation_command;
  end mitigationActor_th.impl;

end threads;
