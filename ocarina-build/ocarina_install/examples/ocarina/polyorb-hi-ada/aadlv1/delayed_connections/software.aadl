--  This AADL model illustrates how to model a simple interaction
--  between tasks connected by an AADL delayed connection
--
--  $Id: software.aadl 5936 2008-11-18 10:22:16Z zalila $

----------
-- Data --
----------

data Simple_Type
properties
  Data_Model::Data_Representation => integer;
end Simple_Type;

-----------------
-- Subprograms --
-----------------

subprogram Send_Spg
features
  Data_Source : out parameter Simple_Type;
  N_Cycle     : out parameter Simple_Type;
end Send_Spg;

subprogram implementation Send_Spg.Impl
properties
  source_language => Ada95;
  source_name     => "Delayed_Connections.Send";
end Send_Spg.Impl;

subprogram Receive_Spg
features
  Data_Sink : in parameter Simple_Type;
  N_Cycle   : in parameter Simple_Type;
properties
  source_language => Ada95;
  source_name     => "Delayed_Connections.Receive";
end Receive_Spg;

-------------
-- Threads --
-------------

thread S
features
  Data_Source : out data port Simple_Type;
  N_Cycle     : out data port Simple_Type;
end S;

thread implementation S.Impl
calls {
  S_Spg : subprogram Send_Spg.Impl;
};
connections
  parameter S_Spg.Data_Source -> Data_Source;
  parameter S_Spg.N_Cycle     -> N_Cycle;
properties
  Dispatch_Protocol       => Periodic;
  Period                  => 1000 Ms;
  Deadline                => 300 ms;
  Deployment::Priority    => 50;
end S.Impl;

thread R
features
  Data_Sink : in data port Simple_Type;
  N_Cycle   : in data port Simple_Type;
end R;

thread implementation R.Impl
calls {
  R_Spg : subprogram Receive_Spg;
};
connections
  parameter Data_Sink -> R_Spg.Data_Sink;
  parameter N_Cycle   -> R_Spg.N_Cycle;
properties
  Dispatch_Protocol    => Periodic;
  Period               => 500 Ms;
  deadline             => 500 Ms;
  Deployment::Priority => 20;
end R.Impl;
