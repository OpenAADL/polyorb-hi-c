--  $Id: ravenscar_example.aadl 5453 2008-11-12 12:49:03Z zalila $

data Workload
properties
  Data_Model::Data_Representation => Integer;
end Workload;

data Interrupt_Counter
properties
  Data_Model::Data_Representation => Integer;
end Interrupt_Counter;

thread Regular_Producer
features
  Additional_Workload : out event data port Workload;
  --  Pour réveiller On_Call_Producer

  Handle_External_Interrupt  : out event port;
  --  Pour réveiller Activation_Log_reader
properties
  Compute_Entrypoint                 => "Work.Regular_Producer_Operation";
  Dispatch_Protocol                  => Periodic;
  Period                             => 1000 ms;
  Deadline                           => 500 ms;
  Compute_Execution_Time             => 0 ms .. 498 ms;
  Cheddar_Properties::Fixed_Priority => 7;
end Regular_Producer;

thread On_Call_Producer
features
  Additional_Workload_Depository : in event data port Workload
    {Queue_Size         => 5;
     Compute_Entrypoint => "Work.On_Call_Producer_Operation";};
  --  Pour recevoir la charge de travail supplémentaire de la part de
  --  Reagular_Producer. Cette taille est donnée par le guide
  --  Ravenscar.
properties
  Dispatch_Protocol                  => Sporadic;
  Period                             => 1000 ms;
  Deadline                           => 800 ms;
  Compute_Execution_Time             => 0 ms .. 250 ms;
  Cheddar_Properties::Fixed_Priority => 5;
end On_Call_Producer;

thread External_Event_Server
features
  External_Interrupt_Depository : in event data port Interrupt_Counter
   {Queue_Size         => 1;
    Compute_Entrypoint => "Events.Delegate_External_Event";};
  --  Délivrée par le processus lourd

  External_Interrupt : out data port Interrupt_Counter;
  --  Vers Activation_Log_Reader
properties
  Dispatch_Protocol                  => Sporadic;
  Period                             => 5000 ms;
  Deadline                           => 100 ms;
  Compute_Execution_Time             => 0 ms .. 2 ms;
  Cheddar_Properties::Fixed_Priority => 11;
end External_Event_Server;

thread Activation_Log_Reader
features
  External_Interrupt_Depository : in data port Interrupt_Counter;
  --  Enregistre la dernière interruption reçue

  Signal : in event port
  {Queue_Size         => 1;
   Compute_Entrypoint => "Logs.On_Signal";};
  --  Reçoit les ordre de réveil de la part de Regular_Producer pour
  --  traiter la dernière interruption.
properties
  Dispatch_Protocol                  => Sporadic;
  Period                             => 1000 ms;
  Deadline                           => 1000 ms;
  Compute_Execution_Time             => 0 ms .. 125 ms;
  Cheddar_Properties::Fixed_Priority => 3;
end Activation_Log_Reader;

thread External_Event_Source
features
  External_Interrupt : out event data port Interrupt_Counter;
properties
  Initialize_Entrypoint              => "Event_Source.Init";
  Compute_Entrypoint                 => "Event_Source.New_External_Event";
  Dispatch_Protocol                  => Periodic;
  Period                             => 5000 ms;
  Deadline                           => 100 ms;
  Compute_Execution_Time             => 0 ms .. 10 ms;
  Cheddar_Properties::Fixed_Priority => 11;
end External_Event_Source;

process Workload_Manager
features
  External_Interrupt_Depository : in event data port Interrupt_Counter;
end Workload_Manager;

process implementation Workload_Manager.Impl
subcomponents
  Regular_Producer      : thread Regular_Producer;
  On_Call_Producer      : thread On_Call_Producer;
  External_Event_Server : thread External_Event_Server;
  Activation_Log_Reader : thread Activation_Log_Reader;
connections
  event data port External_Interrupt_Depository 
     -> External_Event_Server.External_Interrupt_Depository;
  event data port Regular_Producer.Additional_Workload
     -> On_Call_Producer.Additional_Workload_Depository;
  event port Regular_Producer.Handle_External_Interrupt
     -> Activation_Log_Reader.Signal;
  data port External_Event_Server.External_Interrupt
     -> Activation_Log_Reader.External_Interrupt_Depository;
end Workload_Manager.Impl;

process Interrupt_Simulator
features
  External_Interrupt : out event data port Interrupt_Counter;
end Interrupt_Simulator;

process implementation Interrupt_Simulator.Impl
subcomponents
  External_Event_Source : thread External_Event_Source;
connections
  event data port External_Event_Source.External_Interrupt 
     -> External_Interrupt;
end Interrupt_Simulator.Impl;
