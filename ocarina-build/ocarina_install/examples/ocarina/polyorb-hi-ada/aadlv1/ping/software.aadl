--  This AADL model illustrates how to model a simple interaction
--  between tasks, in a local or distributed environment.
--
--  One task pings another, sending a data periodically.
--
--  $Id: software.aadl 5420 2008-09-23 16:17:56Z zalila $

----------
-- Data --
----------

data Simple_Type
properties
  Data_Model::Data_Representation => integer;
end Simple_Type;

data Opaque_Type
properties
  Source_Language => Ada95;
  Type_Source_Name => "User_Types.The_Opaque_Type";
end Opaque_Type;

-----------------
-- Subprograms --
-----------------

subprogram Do_Ping_Spg
features
  Data_Source : out parameter Opaque_Type;
end Do_Ping_Spg;

subprogram Do_Convert_Spg
features
  Data_Sink : in parameter Opaque_Type;
  Data_Source : out parameter Simple_Type;
end Do_Convert_Spg;

subprogram implementation Do_Ping_Spg.Impl
properties
  source_language => Ada95;
  source_name     => "Ping.Do_Ping_Spg";
end Do_Ping_Spg.Impl;

subprogram implementation Do_Convert_Spg.Impl
properties
  source_language => Ada95;
  source_name     => "Ping.Do_Convert_Spg";
end Do_Convert_Spg.Impl;

subprogram Ping_Spg
features
  Data_Sink : in parameter Simple_Type;
properties
  source_language => Ada95;
  source_name     => "Pinged.Ping_Spg";
end Ping_Spg;

-------------
-- Threads --
-------------

subprogram P_Wrapper
features
  Data_Source : out parameter Simple_Type;
end P_Wrapper;

subprogram implementation P_Wrapper.Impl
calls {
  P_Spg : subprogram Do_Ping_Spg.Impl;
  C_Spg : subprogram Do_Convert_Spg.Impl;
};
connections
  parameter P_Spg.Data_Source -> C_Spg.Data_Sink;
  parameter C_Spg.Data_Source -> Data_Source;
end P_Wrapper.Impl;

thread P
features
  Data_Source : out event data port Simple_Type;
end P;

thread implementation P.Impl
calls {
  P_Spg : subprogram P_Wrapper.Impl;
};
connections
  parameter P_Spg.Data_Source -> Data_Source;
properties
  Initialize_Entrypoint              => "Msgs.Welcome_Pinger";
  Dispatch_Protocol                  => Periodic;
  Period                             => 1000 Ms;
  Compute_Execution_time             => 0 ms .. 3 ms;
  Deadline                           => 1000 ms;
  Cheddar_Properties::Fixed_Priority => 2;
end P.Impl;

thread Q
features
  Data_Sink : in event data port Simple_Type;
end Q;

thread implementation Q.Impl
calls {
  Q_Spg : subprogram Ping_Spg;
};
connections
  parameter Data_Sink -> Q_Spg.Data_Sink;
properties
  Dispatch_Protocol                  => Sporadic;
  Period                             => 10 Ms;
  deadline                           => 10 Ms;
  Compute_Execution_time             => 0 ms .. 3 ms;
  Cheddar_Properties::Fixed_Priority => 1;
end Q.Impl;
