--  An implementation of the Worker thread using call sequence
--  mode-based switch.

--  $Id: modes_CS.aadl 6713 2009-06-20 20:58:28Z lanarre $

thread implementation Worker.Impl
calls
  Seq_Normal : { 
    Normal_Spg : subprogram Handle_Message.Normal; 
  } in modes (Normal_Mode);

  Seq_Emergency : { 
    Emergency_Spg : subprogram Handle_Message.Emergency; 
  } in modes (Emergency_Mode);

  Seq_Lazy : { 
    Lazy_Spg : subprogram Handle_Message.Lazy; 
  } in modes (Lazy_Mode);
connections
  parameter Message -> Normal_Spg.M;
  parameter Message -> Emergency_Spg.M;
  parameter Message -> Lazy_Spg.M;
modes
  Normal_Mode    : initial mode; 
  Emergency_Mode : mode;
  Lazy_Mode      : mode;
  
  Normal_Mode,    Lazy_Mode      -[Emergency_Occurred]-> Emergency_Mode;
  Normal_Mode,    Emergency_Mode -[Everything_Is_Cool]-> Lazy_Mode;
  Emergency_Mode, Lazy_Mode      -[Work_Normally     ]-> Normal_Mode;
end Worker.Impl;

------------
-- System --
------------

system Test_Modes_CS
end Test_Modes_CS;

system implementation Test_Modes_CS.ERC32
subcomponents
  Mode_Switch : process   Node_A.Impl;
  The_CPU     : processor CPU.Impl;
properties
  Actual_Processor_Binding => reference The_CPU applies to Mode_Switch;
end Test_Modes_CS.ERC32;
