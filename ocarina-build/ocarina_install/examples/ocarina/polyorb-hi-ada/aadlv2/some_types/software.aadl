--  $Id: software.aadl 7075 2009-10-14 07:57:07Z hugues $

package Software
public
  with Data_Model;

----------
-- Data --
----------

data Boolean_Type
properties
  Data_Model::Data_Representation => boolean;
end Boolean_Type;

data Integer_Type
properties
  Data_Model::Data_Representation => integer;
  Data_Model::Number_Representation => signed;
  Source_Data_Size => 4 Bytes;
end Integer_Type;

data Array_Type
end Array_Type;

data implementation Array_Type.I
properties
  Data_Model::Data_Representation => array;
  Data_Model::Dimension           => (4);
  Data_Model::Base_Type           => (classifier (Software::Integer_Type)); 
end Array_Type.I;

data String_Type
properties
  Data_Model::Data_Representation => string;
  Data_Model::Dimension           => (50);
end String_Type;

-----------------
-- Subprograms --
-----------------

subprogram Emit_Boolean
features
  Data_Source : out parameter Boolean_Type;
properties
  source_language => Ada95;
  source_name     => "Some_Types_Pkg.Emit_Boolean";
end Emit_Boolean;

subprogram Receive_Boolean
features
  Data_Sink : in parameter Boolean_Type;
properties
  source_language => Ada95;
  source_name     => "Some_Types_Pkg.Receive_Boolean";
end Receive_Boolean;

subprogram Emit_Integer
features
  Data_Source : out parameter Integer_Type;
properties
  source_language => Ada95;
  source_name     => "Some_Types_Pkg.Emit_Integer";
end Emit_Integer;

subprogram Receive_Integer
features
  Data_Sink : in parameter Integer_Type;
properties
  source_language => Ada95;
  source_name     => "Some_Types_Pkg.Receive_Integer";
end Receive_Integer;

subprogram Emit_Array
features
  Data_Source : out parameter Array_Type.I;
properties
  source_language => Ada95;
  source_name     => "Some_Types_Pkg.Emit_Array";
end Emit_Array;

subprogram Receive_Array
features
  Data_Sink : in parameter Array_Type.I;
properties
  source_language => Ada95;
  source_name     => "Some_Types_Pkg.Receive_Array";
end Receive_Array;

subprogram Emit_String
features
  Data_Source : out parameter String_Type;
properties
  source_language => Ada95;
  source_name     => "Some_Types_Pkg.Emit_String";
end Emit_String;

subprogram Receive_String
features
  Data_Sink : in parameter String_Type;
properties
  source_language => Ada95;
  source_name     => "Some_Types_Pkg.Receive_String";
end Receive_String;

--------------------------
-- Wrappers Subprograms --
--------------------------

subprogram Emitter_Wrapper
features
  Boolean_Source : out parameter Boolean_Type;
  Integer_Source : out parameter Integer_Type;
  Array_Source   : out parameter Array_Type.I;
  String_Source  : out parameter String_Type;
end Emitter_Wrapper;

subprogram implementation Emitter_Wrapper.Impl
calls 
Mycalls : {
  B_Spg : subprogram Emit_Boolean;
  I_Spg : subprogram Emit_Integer;
  A_Spg : subprogram Emit_Array;
  S_Spg : subprogram Emit_String;
};
connections
  parameter B_Spg.Data_Source -> Boolean_Source;
  parameter I_Spg.Data_Source -> Integer_Source;
  parameter A_Spg.Data_Source -> Array_Source;
  parameter S_Spg.Data_Source -> String_Source;
end Emitter_Wrapper.Impl;

-------------
-- Threads --
-------------

thread Emitter
features
  Boolean_Source : out event data port Boolean_Type;
  Integer_Source : out event data port Integer_Type;
  Array_Source   : out event data port Array_Type.I;
  String_Source  : out event data port String_Type;
end Emitter;

thread implementation Emitter.Impl
calls 
Mycall : {
  Emitter_Wrapper : subprogram Emitter_Wrapper.Impl;
};
connections
  parameter Emitter_Wrapper.Boolean_Source -> Boolean_Source;
  parameter Emitter_Wrapper.Integer_Source -> Integer_Source;
  parameter Emitter_Wrapper.Array_Source -> Array_Source;
  parameter Emitter_Wrapper.String_Source -> String_Source;
properties
  Dispatch_Protocol => Periodic;
  Period            => 1000 Ms;
end Emitter.Impl;

thread Boolean_Receiver
features
  Data_Sink : in event data port Boolean_Type;
end Boolean_Receiver;

thread implementation Boolean_Receiver.Impl
calls 
Mycall : {
  B_Spg : subprogram Receive_Boolean;
};
connections
  parameter Data_Sink -> B_Spg.Data_Sink;
properties
  Dispatch_Protocol => Sporadic;
  Period            => 10 Ms;
end Boolean_Receiver.Impl;

thread Integer_Receiver
features
  Data_Sink : in event data port Integer_Type;
end Integer_Receiver;

thread implementation Integer_Receiver.Impl
calls 
Mycall : {
  I_Spg : subprogram Receive_Integer;
};
connections
  parameter Data_Sink -> I_Spg.Data_Sink;
properties
  Dispatch_Protocol => Sporadic;
  Period            => 10 Ms;
end Integer_Receiver.Impl;

thread Array_Receiver
features
  Data_Sink : in event data port Array_Type.I;
end Array_Receiver;

thread implementation Array_Receiver.Impl
calls 
Mycall : {
  I_Spg : subprogram Receive_Array;
};
connections
  parameter Data_Sink -> I_Spg.Data_Sink;
properties
  Dispatch_Protocol => Sporadic;
  Period            => 10 Ms;
end Array_Receiver.Impl;

thread String_Receiver
features
  Data_Sink : in event data port String_Type;
end String_Receiver;

thread implementation String_Receiver.Impl
calls 
Mycall : {
  S_Spg : subprogram Receive_String;
};
connections
  parameter Data_Sink -> S_Spg.Data_Sink;
properties
  Dispatch_Protocol => Sporadic;
  Period            => 10 Ms;
end String_Receiver.Impl;

end Software;
