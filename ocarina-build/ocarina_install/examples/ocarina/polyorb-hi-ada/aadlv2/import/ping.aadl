--  This model completes the PING example by adding deployment
--  information.
--
--  In this deployment, two nodes are defined, one task per node.
--
--  $Id: ping.aadl 6752 2009-07-01 16:36:45Z lasnier $

package Pack::Ping
public
  with Deployment, Software;

---------------
--    Bus    --
---------------

bus Ethernet_Bus
properties
  Deployment::Transport_API => BSD_Sockets;
end Ethernet_Bus;

---------------
-- Processor --
---------------

processor the_processor
features
  ETH : requires bus access Ethernet_Bus;
properties
  Deployment::location           => "127.0.0.1";
  Deployment::Execution_Platform => Native;
end the_processor;

---------------
-- Processes --
---------------

process A
features
  Out_Port : out event data port Software::Array_Type.I;
end A;

process implementation A.Impl
subcomponents
  Pinger        : thread Software::P.Impl;
connections
  port Pinger.Data_Source -> Out_Port;
end A.Impl;

process B
features
  In_Port  : in event data port Software::Array_Type.I;
end B;

process implementation B.Impl
subcomponents
  Ping_Me        : thread Software::Q.Impl;
connections
  port In_Port -> Ping_Me.Data_Sink;
end B.Impl;

------------
-- System --
------------

system PING
end PING;

system implementation PING.Native
subcomponents
  Node_A : process A.Impl;
  Node_B : process B.Impl {Deployment::port_number => 12002;};

  CPU : processor the_processor {Priority_Range => 0 .. 255;};
  the_bus : bus Ethernet_Bus;
connections
  bus access the_bus -> CPU.ETH;
  port Node_A.Out_Port -> Node_B.In_Port
		{Actual_Connection_Binding => (reference (the_bus));};
properties
  actual_processor_binding => reference (CPU) applies to Node_A;
  actual_processor_binding => reference (CPU) applies to Node_B;
end PING.Native;

end PACK::Ping;
