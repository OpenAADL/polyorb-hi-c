package Software

-- This package models two threads, one pinger and one pingee. Pinger
-- pings pingee periodically.

public
  with Data_Model;

----------
-- Data --
----------

-- We take advantage of the AADL Data Modeling annex document to model
-- data types to be exchanged.

data Simple_Type
properties
  Data_Model::Data_Representation => integer;
end Simple_Type;

-----------------
-- Subprograms --
-----------------

subprogram Do_Ping_Spg
features
  Data_Source : out parameter Simple_Type;
properties
  source_language => Ada95;
  source_name     => "Ping.Do_Ping_Spg";
end Do_Ping_Spg;

subprogram Ping_Spg
features
  Data_Sink : in parameter Simple_Type;
properties
  source_language => Ada95;
  source_name     => "Pinged.Ping_Spg";
end Ping_Spg;

-------------
-- Threads --
-------------

thread Pinger
features
  Data_Source : out event data port Simple_Type;
end Pinger;

thread implementation Pinger.Impl
calls 
Mycall : {
  P_Spg : subprogram Do_Ping_Spg;
};
connections
  parameter P_Spg.Data_Source -> Data_Source;
properties
  Dispatch_Protocol                  => Periodic;
  Period                             => 1 sec;
  Deadline                           => 1 sec;
  Priority                           => 2;
end Pinger.Impl;

thread Pingee
features
  Data_Sink : in event data port Simple_Type;
end Pingee;

thread implementation Pingee.Impl
calls 
Mycall : {
  Q_Spg : subprogram Ping_Spg;
};
connections
  parameter Data_Sink -> Q_Spg.Data_Sink;
properties
  Dispatch_Protocol                  => Sporadic;
  Period                             => 10 ms;
  Deadline                           => 10 ms;
  Priority                           => 1;
end Pingee.Impl;

---------------
-- PROCESSES --
---------------

process Pinger_Process
features
  Out_Port : out event data port Software::Simple_Type;
end Pinger_Process;

process implementation Pinger_Process.Impl
subcomponents
  Pinger        : thread Software::Pinger.Impl;
connections
  port Pinger.Data_Source -> Out_Port;
end Pinger_Process.Impl;

process Pingee_Process
features
  In_Port  : in event data port Software::Simple_Type;
end Pingee_Process;

process implementation Pingee_Process.Impl
subcomponents
  Ping_Me        : thread Software::Pingee.Impl;
connections
  port In_Port-> Ping_Me.Data_Sink;
end Pingee_Process.Impl;

end Software;
