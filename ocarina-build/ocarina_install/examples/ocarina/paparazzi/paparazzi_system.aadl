package paparazzi_system
public

  -- Papabench is a free benchmark describing the architecture of an
  -- unmanned aircraft vehicle called Paparazzi

  -- AADL models originate from documentation and original C Code
  -- freely available under the GNU-GPL

  -- Initial models from papabench v0.4 contributed by F.Nemer, H.CassÃ© (IRIT)

  -- Integration to AADLib (revision/correction of models, update to
  -- AADLv2 and extension) by G.Brau (Univ. Luxembourg/ISAE)

  -- This case study illustrates iterative definition and validation
  -- of real-time workloads (tasks an interruptions) with four
  -- implementations from simplest to most realistic:

  --			1. paparazzi.basic_archi
  --			2. paparazzi.PnP_tasks_interruptions
  --			3. paparazzi.PP_tasks_interruptions
  --			4. paparazzi.PP_tasks_AP_interruptions

  with paparazzi_hard;
  with flyByWire_subsys;
  with autopilot_subsys;
  with Papa_Types;

  -- Basic architecture definition of the paparazzi system
  -- We only model the airborne system

  system paparazzi
  end paparazzi;

  system implementation paparazzi.basic_archi
  subcomponents
    airborne: system airborne.impl;
  end paparazzi.basic_archi;

  -- The airborne system consists of:
  -- 1. Control Board with dual micro-controllers
  -- 2. Servos
  -- 3. Motor controllers
  -- 4. a variety of sensors (example: infrared and GPS)
  -- 5. R/C receiver
  -- 6. data link radio modem
  -- 7. batteries
  -- 8. payloads (example: camera and video transmitter)

  system airborne
  features
    RC_EvtData_Input : in event data port Papa_Types::Unknown;
  end airborne;

  system implementation airborne.impl
  subcomponents
    fly_by_wire : system flyByWire_subsys::MCU1.Impl;
    autopilot : system autopilot_subsys::MCU0.Impl;
    SPI_Bus : bus paparazzi_hard::SPI;
  connections
    -- bus accesses
    acc1: bus access SPI_Bus->autopilot.SPI_Con;
    acc2: bus access SPI_Bus->fly_by_wire.SPI_Con;

    -- connections
    c1: port RC_EvtData_Input->fly_by_wire.RC_EvtData_Input;
    c2: port fly_by_wire.D_MCU1_Output->autopilot.D_MCU1_Input;
    c3: port autopilot.D_MCU0_Output->fly_by_wire.AP_EvtData_Input;

  end airborne.impl;

  -- First task set definition (extends and refines basic architecture)
  -- We consider periodic non preemptive (PnP) tasks and interruptions

  system implementation paparazzi.PnP_tasks_interruptions
     extends paparazzi.basic_archi
  properties
    -- non preemptive scheduling
    Preemptive_Scheduler => false applies to airborne.autopilot.Proc_0;
    Preemptive_Scheduler => false applies to airborne.fly_by_wire.MCU1_P;

    -- RM scheduling (RMS)
    Scheduling_Protocol => (RMS) applies to airborne.autopilot.Proc_0;
    Scheduling_Protocol => (RMS) applies to airborne.fly_by_wire.MCU1_P;

    -- periodic tasks

    -- Note: dispatch protocols and periods are defined in basic
    -- architecture (see autopilot_soft and flyByWire_soft packages)

    -- periodic interruptions
    -- for autopilot
    Dispatch_Protocol => periodic applies to airborne.autopilot.N_S_C_proc.Interrupt_SPI_Th1;
    Period => 50 ms applies to airborne.autopilot.N_S_C_proc.Interrupt_SPI_Th1;
    Dispatch_Protocol => periodic applies to airborne.autopilot.N_S_C_proc.Interrupt_SPI_Th2;
    Period => 50 ms applies to airborne.autopilot.N_S_C_proc.Interrupt_SPI_Th2;
    Dispatch_Protocol => periodic applies to airborne.autopilot.N_S_C_proc.Interrupt_Modem_Th;
    Period => 100 ms applies to airborne.autopilot.N_S_C_proc.Interrupt_Modem_Th;
    Dispatch_Protocol => periodic applies to airborne.autopilot.N_S_C_proc.Interrupt_GPS_Th;
    Period => 250 ms applies to airborne.autopilot.N_S_C_proc.Interrupt_GPS_Th;
    -- for fly-by-wire
    Dispatch_Protocol => periodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_Elevator_Th;
    Period => 50 ms applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_Elevator_Th;		-- Period_servos/6 (6 servos)
    Dispatch_Protocol => periodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_MotorL_Th;
    Period => 52 ms applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_MotorL_Th;			-- Period_servos/6 (6 servos)
    Dispatch_Protocol => periodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_MotorR_Th;
    Period => 54 ms applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_MotorR_Th;			-- Period_servos/6 (6 servos)
    Dispatch_Protocol => periodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_AileronL_Th;
    Period => 56 ms applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_AileronL_Th;		-- Period_servos/6 (6 servos)
    Dispatch_Protocol => periodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_AileronR_Th;
    Period => 58 ms applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_AileronR_Th;		-- Period_servos/6 (6 servos)
    Dispatch_Protocol => periodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_Rudder_Th;
    Period => 60 ms applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_Rudder_Th;			-- Period_servos/6 (6 servos)
    Dispatch_Protocol => periodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_SPI_1;
    Period => 25 ms applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_SPI_1;
    Dispatch_Protocol => periodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_RC_Th;
    Period => 25 ms applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_RC_Th;
  end paparazzi.PnP_tasks_interruptions;

  -- Second task set definition (extends and refines first task set
  -- definition) We consider periodic preemptive (PP) tasks and
  -- interruptions

  system implementation paparazzi.PP_tasks_interruptions
  extends paparazzi.PnP_tasks_interruptions
  properties
    -- Preemptive scheduling (overrides properties from extended
    -- implementations) other properties remain unchanged
    Preemptive_Scheduler => true applies to airborne.autopilot.Proc_0;
    Preemptive_Scheduler => true applies to airborne.fly_by_wire.MCU1_P;

  end paparazzi.PP_tasks_interruptions;

  -- Third task set definition (extends and refines second task set
  -- definition) We consider periodic preemptive (PP) tasks and
  -- aperiodic preemptive (AP) interruptions

  system implementation paparazzi.PP_tasks_AP_interruptions
     extends paparazzi.basic_archi
  properties
    -- preemptive scheduling
    Preemptive_Scheduler => true applies to airborne.autopilot.Proc_0;
    Preemptive_Scheduler => true applies to airborne.fly_by_wire.MCU1_P;

    -- RM scheduling (RMS)
    Scheduling_Protocol => (RMS) applies to airborne.autopilot.Proc_0;
    Scheduling_Protocol => (RMS) applies to airborne.fly_by_wire.MCU1_P;

    -- periodic tasks

    -- Note: dispatch protocols and periods are defined in basic
    -- architecture (see autopilot_soft and flyByWire_soft packages)

    -- aperiodic interruptions
    -- for autopilot
    Dispatch_Protocol => aperiodic applies to airborne.autopilot.N_S_C_proc.Interrupt_SPI_Th1;
    Dispatch_Protocol => aperiodic applies to airborne.autopilot.N_S_C_proc.Interrupt_SPI_Th2;
    Dispatch_Protocol => aperiodic applies to airborne.autopilot.N_S_C_proc.Interrupt_Modem_Th;
    Dispatch_Protocol => aperiodic applies to airborne.autopilot.N_S_C_proc.Interrupt_GPS_Th;

    -- for fly-by-wire
    Dispatch_Protocol => aperiodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_Elevator_Th;
    Dispatch_Protocol => aperiodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_MotorL_Th;
    Dispatch_Protocol => aperiodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_MotorR_Th;
    Dispatch_Protocol => aperiodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_AileronL_Th;
    Dispatch_Protocol => aperiodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_AileronR_Th;
    Dispatch_Protocol => aperiodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_Rudder_Th;
    Dispatch_Protocol => aperiodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_SPI_1;
    Dispatch_Protocol => aperiodic applies to airborne.fly_by_wire.Proc_RcptCde_PilotServ.Interrupt_RC_Th;
  end paparazzi.PP_tasks_AP_interruptions;

end paparazzi_system;
