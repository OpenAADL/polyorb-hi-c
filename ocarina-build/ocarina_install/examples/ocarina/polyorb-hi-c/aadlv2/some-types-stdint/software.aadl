package Software
public
  with Data_Model;

----------
-- Data --
----------

data Boolean_Type
properties
  Data_Model::Data_Representation => integer;
  Source_Data_Size => 2 Bytes;
end Boolean_Type;

data Integer_Type
properties
  Data_Model::Data_Representation => integer;
  Source_Data_Size => 4 Bytes;
end Integer_Type;

-----------------
-- Subprograms --
-----------------

subprogram Emit_Boolean
features
  Data_Source : out parameter Boolean_Type;
properties
  source_language => C;
  source_name     => "user_emit_boolean";
  source_text     => ("some-types-stdint.c");
end Emit_Boolean;

subprogram Receive_Boolean
features
  Data_Sink : in parameter Boolean_Type;
properties
  source_language => C;
  source_name     => "user_receive_boolean";
  source_text     => ("some-types-stdint.c");
end Receive_Boolean;

subprogram Emit_Integer
features
  Data_Source : out parameter Integer_Type;
properties
  source_language => C;
  source_name     => "user_emit_integer";
  source_text     => ("some-types-stdint.c");
end Emit_Integer;

subprogram Receive_Integer
features
  Data_Sink : in parameter Integer_Type;
properties
  source_language => C;
  source_name     => "user_receive_integer";
  source_text     => ("some-types-stdint.c");
end Receive_Integer;

--------------------------
-- Wrappers Subprograms --
--------------------------

subprogram Emitter_Wrapper
features
  Boolean_Source : out parameter Boolean_Type;
  Integer_Source : out parameter Integer_Type;
end Emitter_Wrapper;

subprogram implementation Emitter_Wrapper.Impl
calls 
Mycalls: {
  B_Spg : subprogram Emit_Boolean;
  I_Spg : subprogram Emit_Integer;
};
connections
  parameter B_Spg.Data_Source -> Boolean_Source;
  parameter I_Spg.Data_Source -> Integer_Source;
end Emitter_Wrapper.Impl;

-------------
-- Threads --
-------------

thread Emitter
features
  Boolean_Source : out event data port Boolean_Type;
  Integer_Source : out event data port Integer_Type;
  
end Emitter;

thread implementation Emitter.Impl
calls 
Mycalls: {
  Emitter_Wrapper : subprogram Emitter_Wrapper.Impl;
};
connections
  parameter Emitter_Wrapper.Boolean_Source -> Boolean_Source;
  parameter Emitter_Wrapper.Integer_Source -> Integer_Source;
properties
  Dispatch_Protocol => Periodic;
  Period            => 1000 Ms;
end Emitter.Impl;

thread Boolean_Receiver
features
  Data_Sink : in event data port Boolean_Type;
end Boolean_Receiver;

thread implementation Boolean_Receiver.Impl
calls 
Mycalls: {
  B_Spg : subprogram Receive_Boolean;
};
connections
  parameter Data_Sink -> B_Spg.Data_Sink;
properties
  Dispatch_Protocol => Sporadic;
  Period            => 10 Ms;
end Boolean_Receiver.Impl;

thread Integer_Receiver
features
  Data_Sink : in event data port Integer_Type;
end Integer_Receiver;

thread implementation Integer_Receiver.Impl
calls 
Mycalls: {
  I_Spg : subprogram Receive_Integer;
};
connections
  parameter Data_Sink -> I_Spg.Data_Sink;
properties
  Dispatch_Protocol => Sporadic;
  Period            => 10 Ms;
end Integer_Receiver.Impl;

end Software;
