  package memories_vxworks
  public

  with Memory_Segment_Properties;
  with ARINC653_Extended;

  memory memory_segment
  properties
    memory_segment_properties::Segment_Kind => memory_segment;
  end memory_segment;

  memory implementation memory_segment.impl
    --  This models a generic memory segment. It will be later refined
  end memory_segment.impl;

  memory implementation memory_segment.system_image
  --  VxWorks system Image : segment sizes can be obtained
  --  after the OS compilation

  subcomponents
    seg_text : memory memory_segment.impl {  -- text segment
       Base_Address => 16#001000#;
       ARINC653_Extended::Memory_Kind => text;
       ARINC653_Extended::Access_Type => (execute, read);
       Memory_Size => 3000 Bytes;
    };
    seg_bss : memory memory_segment.impl {   -- bss segment
       Base_Address => 16#003000#;
       ARINC653_Extended::Memory_Kind => bss;
       };
    seg_data : memory memory_segment.impl {  -- data segment
       Base_Address => 16#002000#;
       ARINC653_Extended::Memory_Kind => data_seg;
    };
  properties
    Base_Address => 16#001000#;
    ARINC653_Extended::Memory_Kind => image;

  annex real_specification {**
    theorem check_system_image
       foreach m in local_set do
 	requires (check_system_image_order);
 	check(1=1);
    end check_system_image;
  **};
  end memory_segment.system_image;

  memory implementation memory_segment.board_specific
  --  This memory segment defines the first 4Kbytes segment, per the
  --  VxWorks documentation

  subcomponents
    it_vector : memory memory_segment.impl {
       Base_Address => 16#000000#;
       Memory_Size => 16#000120# Bytes;
    };
    reserved : memory memory_segment.impl {
       Base_Address => 16#000120#;
       Memory_Size => 16#0005E0# Bytes;
    };
    boot_line : memory memory_segment.impl {
       Base_Address => 16#000700#;
       Memory_Size => 16#000100# Bytes;
    };
    exception_msg : memory memory_segment.impl {
       Base_Address => 16#000800#;
       Memory_Size => 16#000100# Bytes;
    };
    initial_stack : memory memory_segment.impl {
       Base_Address => 16#000900#;
       Memory_Size => 16#000700# Bytes;
    };
 properties
   Base_Address => 16#00000000#;
   Memory_Size => 16#00001000# Bytes;
 end memory_segment.board_specific;

 memory address_space
 -- memory mapping  (OS point of view of the memory usage)
 -- some section localizations are well known, others
 -- depend of the system usage, or compilation results.

 properties
   memory_segment_properties::Segment_Kind => address_space;
 end address_space;

 memory implementation address_space.vxworks
 subcomponents
   system_memory_pool : memory  memory_segment.impl {
      Base_Address => 16#FF800000#;
      Memory_Size => 16#00040000# Bytes;
   };
   system_reserved : memory memory_segment.board_specific;
   system_image : memory  memory_segment.system_image;
   boot_code_and_data : memory memory_segment.impl;
   it_stack : memory memory_segment.impl {
      Memory_Size => 16#00001000# Bytes;
   };

 properties
   Base_Address => 16#00000000#;
   memory_segment_properties::Page_Size => 16#1000# Bytes;
   Memory_Size  => 2#1#e32 Bytes; -- 32 bit address bus
   memory_segment_properties::Address_Kind => logical_as;
 end address_space.vxworks;

 memory implementation address_space.mv162
 -- physical memory mapping for the Motorola mv162 board.

 subcomponents
   ram : memory memory_segment.impl {
      Base_Address => 16#00000000#;  --  LOCAL_MEM_LOCAL_ADRS
      Memory_Size => 16#00400000# Bytes;
      Word_Space => 2;
      ARINC653_Extended::Access_Type => (read, write, execute);
   };
   rom : memory memory_segment.impl {
      Base_Address => 16#FF800000#;
      Memory_Size => 16#00040000# Bytes;
      Word_Space => 2;
      ARINC653_Extended::Access_Type => (read, execute);
   };

 properties
   Base_Address => 16#00000000#;
   Memory_Size   => 2#1#e32 Bytes;
   memory_segment_properties::Address_Kind => physical_as;
   ARINC653_Extended::Access_Type => (read, execute);
 end address_space.mv162;

 end memories_vxworks;